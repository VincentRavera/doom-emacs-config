#+TITLE:   Notes to use emacs
#+DATE:    mars 27, 2020

* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
- [[#notes][Notes]]
  - [[#dired][Dired]]
    - [[#enter-a-directoryfile][Enter a directory/file]]
    - [[#move-to-parent-folder][move to parent folder]]
    - [[#create-a-directory][Create a directory]]
    - [[#create-a-file][Create a file]]
    - [[#marks][Marks]]
    - [[#sorting-by-namedate][Sorting by name/DATE]]
    - [[#permissions][Permissions]]
    - [[#ownership][Ownership]]
    - [[#selection][Selection]]
    - [[#copy-file][Copy file]]
    - [[#move-file-rename][Move file (rename)]]
    - [[#quick-rename-a-file][Quick rename a file]]
  - [[#eshell][eshell]]
    - [[#variables][Variables]]
    - [[#math][Math]]
    - [[#strings][Strings]]
    - [[#predicates][Predicates]]
    - [[#lists-and-con-cells][Lists (and Con-cells)]]
    - [[#arrays-and-vector][Arrays and Vector]]
    - [[#conditionnals][Conditionnals]]
    - [[#loops-and-iterations][Loops and Iterations]]
    - [[#random][Random]]
    - [[#redirecting-to-buffer][redirecting to buffer]]
  - [[#lsp][lsp]]
    - [[#python][python]]
    - [[#java][java]]
    - [[#ruby][ruby]]
    - [[#personal-bindings][personal bindings]]

* Description
This repo contains my doom config
* Notes
** Dired
Since dired does not have a ~?~ prompt, here i will enuerates commands.
*** Enter a directory/file
~Enter~
*** move to parent folder
~-~
*** Create a directory
~+~
*** Create a file
~SPC-.~
*** Marks
**** For deletion
~d~
**** Execute
~x~
*** Sorting by name/DATE
~o~
*** Permissions
~M~
*** Ownership
~O~
*** Selection
**** Select all directories
~*/~
**** invert selection
~t~
**** Select an item
~m~
**** Cancel selection
~U~
*** Copy file
~C~
I an other dired Buffer is open, copy location is autofilled
Act on selections, if no selections, act on the file where the crusor is.
*** Move file (rename)
~R~
I an other dired Buffer is open, copy location is autofilled
Act on selections, if no selections, act on the file where the crusor is.
*** Quick rename a file
~i~
go to insertion mode and rename file and save buffer
** eshell
Changes a lot from bash.
Link to wiki is: https://www.emacswiki.org/emacs/CategoryEshell
config lies in the ~eshell/~ directory
I will list all the tips and tricks i find here
I always use () becaus elisp require them, but in eshell you can drop the outer most ().
e.g.:
#+begin_src emacs-lisp :tangle yes
(+ 5 7) ;; in eshell you can type + 5 7
#+end_src
*** Variables
Set a variable
| bash               | elisp              |
|--------------------+--------------------|
| export toto=5      | (setq toto 5)      |
| export tutu="TUTU" | (setq tutu "TUTU") |
| titi=("a" "b")     | (setq (list a b))  |
| tata="a b c"       | (setq titi '(a b)) |
Set variable is not present
#+BEGIN_SRC elisp
(defvar toto "tutu")
#+END_SRC
~?~ before a character means that it is a simple charcter

*** Math
| Remarks                                    | Functions                     |              Output |
|--------------------------------------------+-------------------------------+---------------------|
|                                            | (+ 5 2)                       |                   7 |
|                                            | (- 7 2)                       |                   5 |
|                                            | (* 5 2)                       |                  10 |
| Eshell needs the paren for this operations | (/ 10.0 7) ;; outputs a float |  1.4285714285714286 |
| Eshell needs the paren for this operations | (/ 10 7) ;; rounds            |                   1 |
|                                            | (cos 3)                       | -0.9899924966004454 |
|                                            | (sin 1.7)                     |  0.9916648104524686 |
|                                            | (tan 2)                       |  -2.185039863261519 |
|                                            | (acos 0.9)                    | 0.45102681179626236 |
|                                            | (asin 0.9)                    |  1.1197695149986342 |
|                                            | (atan 999)                    |  1.5697953261282307 |
|                                            | (exp 3)                       |  20.085536923187668 |
|                                            | (log 2 (exp 1))               |  0.6931471805599453 |
|                                            | (expt 2 2)                    |                   4 |
|                                            | (sqrt 4)                      |                 2.0 |
#+TBLFM: $3='(eval (car (read-from-string $2)))
*** Strings
| Function                         | Name                           | Output            |
|----------------------------------+--------------------------------+-------------------|
| Repeat a charcter                | (make-string 5 ?x)             | xxxxx             |
| Make a string out of characters  | (string ?a ?b ?k)              | abk               |
| Substring                        | (substring "ABCDEFG" 2 5 )     | CDE               |
| Concatenations                   | (concat "Hello " "World")      | Hello World       |
| Split arround spaces             | (split-string " Hello World ") | ("Hello" "World") |
| Comparisons                      | (string= "toto" "toto")        | t                 |
| Conversion to number             | (string-to-number "55")        | 55                |
| Conversion from number to String | (number-to-string 55.0)        | 55.0              |
#+TBLFM: $3='(eval (car (read-from-string $2)))

*** Predicates
Predicates test variable type, returns ~t~ or ~nil~.
| Type            | functions           | Output |
|-----------------+---------------------+--------|
| String          | (stringp "toto")    | t      |
| Integer         | (integerp 5)        | t      |
| floatp          | (floatp 5.0)        | t      |
| Any Number      | (numberp 3)         | t      |
| Natural Numbers | (natnump 0)         | t      |
| Zero            | (zerop 0)           | t      |
| Lists           | (listp '(a b c))    | t      |
| Lists 2         | (listp '(list a b)) | t      |
| Concell         | (consp '(a b c))    | t      |
| Concell 2       | (consp '(list a b)) | t      |
| Arrays          | (arrayp [a b])      | t      |
| Arrays          | (arrayp [a "b"])    | t      |
| Vector          | (arrayp [a "b"])    | t      |
| Vector          | (arrayp [a b])      | t      |
#+TBLFM: $3='(eval (car (read-from-string $2)))

*** Lists (and Con-cells)
| Type                  | functions               | Output |
|-----------------------+-------------------------+--------|
| Create a list         | (setq li '(a b c ))     | #ERROR |
| Create a list         | (setq li2 (list a b c)) | #ERROR |
| First item            | (car '(a b c))          | a      |
| Not first             | (cdr li2)               | #ERROR |
| Remove 1st, return it | (pop li)                | a      |
| Add item              | (push 'p li)            | #ERROR |
| Last                  | (last '(a b c))         | #ERROR |
| 1st item of fist item | (caar '(a b)(c d))      | #ERROR |
| Append                | (append li2 '(a b c))   | #ERROR |
#+TBLFM: $3='(eval (car (read-from-string $2)))
*** Arrays and Vector
Declared differently from list
| Note    | Functions                    | Output               |
|---------+------------------------------+----------------------|
| Arrays  | (setq w [abc def ghi])       | [abc def ghi]        |
|         | (aref w 1)                   | def                  |
|         | (aset w 0 'xyz)              | xyz                  |
| Vectors | (vector 'def [o 77.9] 7 8.0) | [def [o 77.9] 7 8.0] |
|         | (make-vector 3 ?Z)           | [90 90 90]           |
|         | (vconcat w [jkl])            | [xyz def ghi jkl]    |
#+TBLFM: $3='(eval (car (read-from-string $2)))
*** Conditionnals
Example of if
#+begin_src emacs-lisp :tangle yes
(if nil
    (print 'true)
  'very-false)
#+end_src
| Notes         | Functions               | Output |
|---------------+-------------------------+--------|
|               | (not nil)               | t      |
|               | (and t t)               | t      |
|               | (and t t t)             | t      |
| Same as above | (if t (if t t))         | t      |
| Same as above | (cond (t (cond (t t)))) | t      |
|               | (or nil t)              | t      |
|               | (or t nil nil)          | t      |
| Same as above | (cond (t)(nil)(nil))    | t      |
#+TBLFM: $3='(eval (car (read-from-string $2)))

*** Loops and Iterations
**** While
#+begin_src emacs-lisp
(setq num 0)
(while (< num 5)
  (print (format "Iteration %d." num))
  (setq num (1+ num)))
(print num)
#+end_src
**** do list
#+begin_src emacs-lisp :tangle yes
#+end_src

#+RESULTS:
**** loop
***** for
#+begin_src emacs-lisp :tangle yes
(loop for i in '(1 0 2) collect (* i i))
#+end_src

#+RESULTS:
| 1 | 0 | 4 |

#+begin_src emacs-lisp :tangle yes
(setq seq "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(loop for i across seq count i)
#+end_src

#+RESULTS:
: 26

Examples shown in : https://www.emacswiki.org/emacs/EshellForLoop
#+BEGIN_SRC bash
# 1
for i in *.txt
do
    rm $i
    git status
done
#2
for i in 1 2 3 4; do echo $i ; done
#3
for i in $(find -name .toto); do cp -f /tmp/toto $i ; done
#+END_SRC
#+BEGIN_SRC eshell
;; 1
for i in *.txt { rm $i ; git status }
;; 2
for i in 1 2 3 4 {echo $i}
;; 3
for i in {find -name .toto} {cp -f /tmp/toto/ $i}
#+END_SRC

*** Random
| bash                  | elisp      |
|-----------------------+------------|
| echo $RANDOM          | (random)   |
| echo $(($RANDOM % 6)) | (random 6) |

*** redirecting to buffer
#+BEGIN_SRC eshell
echo "Hello" > #<buffer toto>
#+END_SRC
You can also interactively choose a buffer with ~C-c M-b~ command ~eshell-insert-buffer-name~
** lsp
lsp is used for language completions
*** python
TODO
*** java
TODO
*** ruby
TODO
*** personal bindings
